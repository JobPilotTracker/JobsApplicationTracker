// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  admin
  moderator
  user
}

enum ApplicationStatus {
  NOT_APPLIED         @map("Not Applied")
  APPLIED             @map("Applied")
  IN_PROCESS          @map("In-Process")
  INTERVIEW           @map("Interview")
  TECHNICAL_INTERVIEW @map("Technical Interview")
  FINAL_INTERVIEW     @map("Final Interview")
  REJECTED            @map("Rejected")
  OFFER               @map("Offer")
}

enum EmploymentType {
  FREELANCE      @map("Freelance")
  FIXED_CONTRACT @map("Fixed Contract")
  FULL_TIME      @map("Full-Time")
  PART_TIME      @map("Part-Time")
}

enum SeniorityLevel {
  JUNIOR     @map("Junior")
  MID        @map("Mid")
  SENIOR     @map("Senior")
  MANAGEMENT @map("Management")
  CONSULTANT @map("Consultant")
}

enum RemoteType {
  ON_SITE @map("On-Site")
  REMOTE  @map("Remote")
  HYBRID  @map("Hybrid")
}

// Models
model User {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password_hash  String
  first_name     String
  last_name      String
  role           UserRole @default(user)
  email_verified Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  applications   Application[]
  reminders      Reminder[]
  tags           Tag[]
  oauth_accounts UserOAuthAccount[]

  @@map("users")
}

model OAuthProvider {
  id                String   @id @default(uuid())
  name              String   @unique
  client_id         String
  client_secret     String
  authorization_url String
  token_url         String
  user_info_url     String
  scope             String
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  // Relations
  user_accounts UserOAuthAccount[]

  @@map("oauth_providers")
}

model UserOAuthAccount {
  id               String    @id @default(uuid())
  user_id          String
  provider_id      String
  provider_user_id String
  access_token     String?
  refresh_token    String?
  expires_at       DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt

  // Relations
  user     User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  provider OAuthProvider @relation(fields: [provider_id], references: [id], onDelete: Cascade)

  @@unique([provider_id, provider_user_id])
  @@map("user_oauth_accounts")
}

model Company {
  id          String   @id @default(uuid())
  name        String
  website_url String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // Relations
  job_postings JobPosting[]
  job_posters  JobPoster[]

  @@map("companies")
}

model JobPoster {
  id         String   @id @default(uuid())
  company_id String
  name       String
  email      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  company      Company      @relation(fields: [company_id], references: [id], onDelete: Cascade)
  job_postings JobPosting[]

  @@map("job_posters")
}

model JobPosting {
  id              String          @id @default(uuid())
  company_id      String
  job_poster_id   String?
  title           String
  location        String?
  description     String?
  employment_type EmploymentType?
  seniority_level SeniorityLevel?
  remote_type     RemoteType?
  salary_min      Int?
  salary_max      Int?
  currency        String?
  date_posted     DateTime?
  date_ends       DateTime?
  job_advert_url  String?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt

  // Relations
  company      Company       @relation(fields: [company_id], references: [id], onDelete: Cascade)
  job_poster   JobPoster?    @relation(fields: [job_poster_id], references: [id], onDelete: SetNull)
  applications Application[]

  @@map("job_postings")
}

model Application {
  id                           String            @id @default(uuid())
  user_id                      String
  job_posting_id               String
  date_applied                 DateTime?
  status                       ApplicationStatus @default(NOT_APPLIED)
  given_salary_expectation     Int?
  submitted_salary_expectation Int?
  notes                        String?
  created_at                   DateTime          @default(now())
  updated_at                   DateTime          @updatedAt

  // Relations
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  job_posting      JobPosting       @relation(fields: [job_posting_id], references: [id], onDelete: Cascade)
  status_history   StatusHistory[]
  reminders        Reminder[]
  application_tags ApplicationTag[]

  @@map("applications")
}

model StatusHistory {
  id             String            @id @default(uuid())
  application_id String
  status         ApplicationStatus
  notes          String?
  created_at     DateTime          @default(now())

  // Relations
  application Application @relation(fields: [application_id], references: [id], onDelete: Cascade)

  @@map("status_history")
}

model Reminder {
  id             String   @id @default(uuid())
  user_id        String
  application_id String?
  title          String
  description    String?
  reminder_date  DateTime
  is_completed   Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt

  // Relations
  user        User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  application Application? @relation(fields: [application_id], references: [id], onDelete: Cascade)

  @@map("reminders")
}

model Tag {
  id         String   @id @default(uuid())
  user_id    String
  name       String
  color      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  user             User             @relation(fields: [user_id], references: [id], onDelete: Cascade)
  application_tags ApplicationTag[]

  @@unique([user_id, name])
  @@map("tags")
}

model ApplicationTag {
  id             String   @id @default(uuid())
  application_id String
  tag_id         String
  created_at     DateTime @default(now())

  // Relations
  application Application @relation(fields: [application_id], references: [id], onDelete: Cascade)
  tag         Tag         @relation(fields: [tag_id], references: [id], onDelete: Cascade)

  @@unique([application_id, tag_id])
  @@map("application_tags")
}
